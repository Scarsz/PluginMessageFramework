defaultTasks 'clean', 'javadoc', 'check', 'build', 'publishToMavenLocal'

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group = 'github.scarsz.pluginmessageframework'
    version = "1.1.0"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    configurations {
        deployerJars
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    checkstyle {
        toolVersion = 6.5
        configFile = getRootProject().file("checkstyle.xml")
        configProperties = [
                'basedir'     : project.projectDir,
                'suppressions': getRootProject().file("checkstyle-suppressions.xml").absoluteFile,
                'severity'    : 'warning'
        ]
    }
    checkstyleMain {
        source = sourceSets.main.allJava
    }
    checkstyleTest {
        source = sourceSets.test.allJava
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = project.configurations.deployerJars
            repository(url: System.env.mavenRepo) {
                authentication(userName: System.env.mavenRepoUsername, password: System.env.mavenRepoPassword)
            }
        }
        dependsOn check
    }

    tasks.jar.dependsOn "check"

    compileJava {
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-http:+"
    }
}

task generateAggregatedJavadocs(type: Javadoc) {
    source = subprojects.collect { project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    excludes = ['**/internal/**', '**/Impl*']
    destinationDir = getRootProject().file('docs')
}